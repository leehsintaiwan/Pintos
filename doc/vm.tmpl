            +--------------------------+
            |          OS 211          |
            |  TASK 3: VIRTUAL MEMORY  |
            |      DESIGN DOCUMENT     |
            +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Sipan Petrosyan <sipan.petrosyan20@imperial.ac.uk>
Vincent Lee <vincent.lee20@imperial.ac.uk>
Jamie Todd <jamie.todd20@imperial.ac.uk>
Joel Chu <joel.chu20@imperial.ac.uk>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, or notes for the
>> markers, please give them here.

>> Please cite any offline or online sources you consulted while preparing your 
>> submission, other than the Pintos documentation, course text, lecture notes 
>> and course staff.

            PAGE TABLE/FRAME MANAGEMENT
            =====================

---- DATA STRUCTURES ----

>> A1: (2 marks)
>> Copy here the declaration of each new or changed `struct' or `struct' member,
>> global or static variable, `typedef', or enumeration that relates to your 
>> supplemental page table and frame table. 
>> Identify the purpose of each in roughly 25 words.

// Struct for a frame, containing all necessary information about that frame
struct frame
{
  void *frame_address;              /* Frame address allocated using palloc */
  void *page_address;               /* User page address that's using this frame */
  struct hash_elem hash_elem;       /* Hash elem used in hash table */
  struct list_elem list_elem;       /* List elem used in frame_list */
  struct thread *thread;            /* Stores the thread that owns this frame */
  struct file_struct *file_info;    /* File that if read-only can be used for sharing */
  uint32_t num_shared_pages;        /* Number of pages shared between other processes */
  bool used;                        /* Indicates that a frame is being used, 
                                       to prevent it from being evicted */
};

// Frame table stored as a hash table
struct hash frame_table;

// Frame lock to be acquired when accessing frame table to avoid race conditions
static struct lock frame_lock;

// Frame list for looping through frames in round of robin to find next victim
static struct list frame_list;
static struct list_elem *frame_pointer; // pointer to elem in frame_list

/* The different locations/states
   the page can be in. */
enum page_loc 
{
  FRAME, /* In memory. */
  ZERO, /* Zeros. */
  SWAP, /* In swap slot. */
  EXECFILE /* In filesys/executable. */
};

// Struct for the supplemental page table
struct supp_page_table 
{
  /* Map from page to the supplemental page table entry. */
  struct hash page_table;
};

/* A page is an entry of the supp_page_table. */
struct page 
{
  void *address; /* Virtual address of the page. */
  void *faddress; /* Frame address of the page (location in the kernel). */
  enum page_loc page_from; /* Where the page is from */
  bool dirty_bit; /* Whether the page has been modified */

  // When page loc is SWAP
  uint32_t swap_index; /* swap index of page in swap table */

  // When page loc is FILE
  struct file_struct *file_info;

  struct hash_elem elem; 
};

/* Struct for a file, containing all necessary information for that file */
struct file_struct 
{
  struct file *file; /* Executable file. */
  int32_t file_start_byte; /*  Offset in the file to start read. */
  size_t file_read_bytes; /* Number of bytes to read. */
  size_t file_zero_bytes; /* Number of trailing 0 bytes. */
  bool file_writeable;  /* Is file writeable (based on segment being read). */
};

---- ALGORITHMS ----

>> A2: (2 marks) 
>> Describe your code for finding the frame (if any) or other location that 
>> contains the data of a given page.

We use a struct to store pages and it's data.
We store these page strucs in a hash map and so use the hash_find function in find_page() to get the page struct based on
the address of the page (the page address is used for the hashing).
This hash map is stored as a member of the supp_page_table struct.
To get the data based on location, we use an enumerated type page_loc which stores the location of the page.
This enumerated type is stored as a member of the struct (page_from), and so based on this we can use 
member access operators to get the relevant piece of data. For example, if page_from is FRAME then we can
get access the faddress member in the page struct. We also store the files and swap index.

>> A3: (2 marks) ******************************************************************************************************************************************
>> How have you implemented sharing of read only pages?
In our frame struct we included a file_struct pointer (*file) and a variable counting the number of pages shared between processes (num_shared_pages).
When we add a frame to the frame table we give the frame the pointer to the relevant file_struct. Whenever we want to load a page (which is in the file system) back on frame,
we iterate through the frame table and check if the file stored in the page struct matches with a file in a frame table entry. If so, and the file is read-only, then we set the page's
faddress to the frame's address, and increment the num_shared_pages of the frame.

---- SYNCHRONIZATION ----

>> A4: (2 marks) 
>> When two user processes both need a new frame at the same time, how are 
>> races avoided? 
>> You should consider both when there are and are not free frames 
>> available in memory.

We defined a "lock" field (a struct lock) in the frame_table struct. This lock is acquired whenever 
a user process attempts to access a frame in the frame table in any way (add, get, destroy, lookup), and released only after the frame table 
has been accessed (and potentially modified). This prevents two user processes accessing the frame table simultaneously, thus avoiding races.
Even if there are no free frames in the table, when we evict a frame we still lock the frame table before eviction and release after eviction to avoid races.

---- RATIONALE ----

>> A5: (2 marks)
>> Why did you choose the data structure(s) that you did for representing the
>> supplemental page table and frame table?

We chose to implement our supplemental page table and frame table by using a hash table,
because hash tables support efficient lookup, insertion and deletion (O(1)).
Frequent adding and deleting a page and frame is necessary therefore we refrained
from using a list.


               PAGING TO AND FROM DISK
               =======================

---- DATA STRUCTURES ----

>> B1: (1 mark)
>> Copy here the declaration of each new or changed `struct' or `struct' member,
>> global or static variable, `typedef', or enumeration that relates to your 
>> swap table.  
>> Identify the purpose of each in roughly 25 words.

#define SECTORS_PER_PAGE (PGSIZE / BLOCK_SECTOR_SIZE) // Number of sectors an individual page takes up in block_swap

static struct block *block_swap; // A block where all pages in the swap table are written to, read from, and freed

static struct bitmap *swap_bitmap; // Bitmap for checking availiable swap slots

static size_t swap_table_size; // The size of the swap table (number of swap slots)

struct lock swap_lock; // Swap table lock to prevent race conditions

---- ALGORITHMS ----

>> B2: (2 marks)
>> When a frame is required but none is free, some frame must be evicted.
>> Describe your code for choosing a frame to evict.

We keep track of the frames we have in the frame table using a circular list.
We also keep track of a frame pointer to point to the next possible victim we could evict.
The evict_frame function uses the second chance algorithm. It goes through the
list in a loop and finds the first frame that has not been accessed.
If a frame is accessed then we set it to not accessed, and increment the pointer
to point to the next frame in the list.

>> B3: (2 marks)
>> When a process P obtains a frame that was previously used by a process Q,
>> how do you adjust the page directory of process Q (and any other data 
>> structures) to reflect the frame Q no longer has?

We first call pagedir_clear_page on the evicted page to remove the frame from its page table.
Then we store the swap status and swap index in the page struct associated to the evicted frame.
We also copy over the dirty bit and set frame address to NULL for that page struct
before we free the frame from our frame table.

---- SYNCHRONIZATION ----

>> B4: (2 marks)
>> Explain how your synchronization design prevents deadlock.  
>> (You may want to refer to the necessary conditions for deadlock.)

In order to have a deadlock, two threads would need to acquire two locks in opposite order.
We only have a frame lock which gets acquired when a frame table is accessed,
and a swap lock which is acquired when the swap table is accessed.
Our swap functions are only called within the evict_frame function, therefore the
frame lock would always be acquired before the swap lock. Thus, the order that
the two locks are acquired are always in order, preventing a deadlock.

>> B5: (2 marks)
>> A page fault in process P can cause another process Q's frame to be evicted.
>> How do you ensure that Q cannot access or modify the page during the 
>> eviction process?

Any page that wants to access any frame on the frame table would need to acquire
a global frame table lock first. This ensures that only one process can access
the frame table at once.

>> B6: (2 marks)
>> A page fault in process P can cause another process Q's frame to be evicted.
>> How do you avoid a race between P evicting Q's frame and Q faulting the page
>> back in?

When eviction happens, a global swap lock must acquired before writing the
evicted frame into the swap table. Also anytime a page fault requires a frame on
the swap table to be loaded back in, the global swap lock also needs to be acquired.
Therefore, only one process can access the swap table at once avoiding race conditions.

>> B7: (2 marks) 
>> Explain how you handle access to user pages that are not present when a
>> system call is made.

We have a 'used' member in the frame struct to ensure that before the read and write 
system calls the frames are set to being 'used' meaning that they cannot be evicted and so
will always be present when these read and write system calls are being made.
For all of the other system calls, if the user page is not present then they will
cause a page fault which will then load the page in using the load_page function.
The page fault handler looks up pages which are not present the supplementary page in 
the thread's page table and based on the page_from member of the page struct
it allocates a frame and assigns the appropriate data to it, as with user programs.

---- RATIONALE ----

>> B8: (2 marks)
>> There is an obvious trade-off between parallelism and the complexity of your
>> synchronisation methods. 
>> Explain where your design falls along this continuum and why you chose to 
>> design it this way.

Our design falls closer to a simpler design in terms of synchronisation methods
as we only have two global locks one for the frame table, one for the swap table.
We chose to have this design because we wanted to ensure there are no two processes
that access or modify the frame table or swap table at the same time.
By using fewer locks, we can ensure that the locks are always acquired in the same
order, therefore avoiding any deadlocks.

             MEMORY MAPPED FILES
             ===================

---- DATA STRUCTURES ----

>> C1: (1 mark)
>> Copy here the declaration of each new or changed `struct' or `struct' member,
>> global or static variable, `typedef', or enumeration that relates to your 
>> file mapping table.  
>> Identify the purpose of each in roughly 25 words.

typedef int mapid_t;

typedef is used to distinguish between a mapping id and a normal int

struct md
   {
      mapid_t id;
      struct list_elem elem;
      struct file* file;
      void *addr;
      size_t size;
   };

A struct containing the information of a map descriptor,
including its mapping id, pointer to the file, where the file is mapped to and the file size

struct thread now contains a list of memory mapped files, given by the field:
struct list *mmap_list;

---- ALGORITHMS ----

>> C2: (3 marks)
>> Explain how you determine whether a new file mapping overlaps with any 
>> existing segment and how you handle such a case.

Before we map the files, we check if those pages are already mapped by using a for loop to go through the pages
and check if they have already been mapped with find_page().
If find_page() returns something that is not null at any point in the for loop, this means the new file mapping will
overlap with an existing set of mapped pages so we release the lock and release -1 to indicate a failure.

---- RATIONALE ----

>> C3: (1 mark) ******************************************************************************************************************************************
>> Mappings created with "mmap" have similar semantics to those of data 
>> demand-paged from executables. 
>> How does your code-base take advantage of this?
